!function(t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):window.$_=t()}(function(){var t=function(t){"string"==typeof t&&(this.value=Array.prototype.slice.call(document.querySelectorAll(t))),"object"==typeof t&&(this.value=[t])};return t.prototype={each:function(t){return[].forEach.call(this.value,t),this},css:function(t,e){return this.each(function(n){n.style.cssText=n.style.cssText+t+":"+e})},rawCss:function(t){return this.each(function(e){e.style.cssText=e.style.cssText+t})},attr:function(t,e){return this.each(function(n){n.setAttribute(t,e)})},getAttr:function(t){return this.value[0].getAttribute(t)},removeAttr:function(t){return this.each(function(e){e.removeAttribute(t)})},animate:function(t,e,n,s,i,r,c,a,o,u){return this.each(function(f){f.style.cssText=f.style.cssText+"transition: all "+t+"s ease-in-out; transform: scale("+e+") rotate("+n+"deg) rotateX("+s+"deg) rotateY("+i+"deg) translate("+r+"px, "+c+"px) skew("+a+"deg, "+o+"deg); opacity:"+u+";"})},on:function(t,e){return this.each(function(n){n.addEventListener(t,e,!1)})},addClass:function(t){var e=t.split(" ");return this.each(function(t){for(var n=0;n<e.length;n++)t.classList?t.classList.add(e[n]):t.className+=" "+e[n]})},toggleClass:function(t){var e=t.split(" ");return this.each(function(t){for(var n=0;n<e.length;n++)t.classList?t.classList.toggle(e[n]):new RegExp("\\b"+e[n]+"\\b").test(t.className)?t.className=t.className.replace(new RegExp("\\b"+e[n]+"\\b","g"),""):t.className+=" "+e[n]})},removeClass:function(t){var e=t.split(" ");return this.each(function(t){for(var n=0;n<e.length;n++)t.classList?t.classList.remove(e[n]):t.className=t.className.replace(new RegExp("\\b"+e[n]+"\\b","g"),"")})},html:function(t){return void 0===t?this.value[0].innerHTML:this.each(function(e){e.innerHTML=t})},text:function(t){return void 0===t?this.value[0].innerText||this.value[0].textContent:this.each(function(e){e.innerText=t,e.textContent=t})},val:function(t){return void 0===t?this.value[0].value:this.each(function(e){e.value=t})},insertBefore:function(t){return this.each(function(e){e.insertAdjacentHTML("beforeBegin",t)})},insertAfter:function(t){return this.each(function(e){e.insertAdjacentHTML("afterEnd",t)})},insertFirst:function(t){return this.each(function(e){e.insertAdjacentHTML("afterBegin",t)})},insertLast:function(t){return this.each(function(e){e.insertAdjacentHTML("beforeEnd",t)})},empty:function(){return this.each(function(t){t.innerHTML=""})}},function(e){return new t(e)}});